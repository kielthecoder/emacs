#+TITLE: Emacs Config
#+AUTHOR: Kiel Lofstrand
#+TOC: true

* About

This is my Emacs configuration.  I'm using [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]] as a reference since it seems to be the best!

* Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Kiel Lofstrand")
  (setq user-mail-address "kiel.lofstrand@gmail.com")
#+END_SRC

* Start Up
** Required Packages

Which packages am I always going to require?  Order isn't important here.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (require 'org)
  (require 'cl)
#+END_SRC

** Repositories

Slightly updated with instructions from [[http://melpa.org/#/getting-started][Getting started]] on melpa.org.

List the available package repositories.  I think most distributions provide Emacs 24 by now, but you never know.

#+BEGIN_SRC emacs-lisp
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		      (not (gnutls-available-p))))
	 (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "Your version of Emacs does not support SSL connections, which is unsafe because it allows man-in-the-middle attacks.  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

** Available Packages

Fetch the list of available packages.

#+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

** My Packages

Define the packages I'm currently using.

#+BEGIN_SRC emacs-lisp
  (defvar my-packages '(org slime org-journal f))
#+END_SRC

Install missing packages automatically.

#+BEGIN_SRC emacs-lisp
  (dolist (pkg my-packages)
    (unless (package-installed-p pkg)
      (package-install pkg)))
#+END_SRC

Immediately require any packages used within this file.

#+BEGIN_SRC emacs-lisp
  (require 'f)
#+END_SRC
   
* Important Directories

Some packages need to know where to save things.

** Dropbox

Indicate where Dropbox lives on this machine.  A lot of things should be saved there so they are synced across all devices.

#+BEGIN_SRC emacs-lisp
  (setq dropbox-dir (f-join "/" "Dropbox"))
#+END_SRC

** org-journal

Where should we save our journal entries?

#+BEGIN_SRC emacs-lisp
  (setq org-journal-dir (f-join dropbox-dir "Notes" "Journal"))
#+END_SRC

** org-capture

Where should we save captured snippets?

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (f-join dropbox-dir "Notes" "notes.org"))
  (setq org-capture-tasks (f-join dropbox-dir "Notes" "tasks.org"))
  (setq org-capture-journal (f-join dropbox-dir "Notes" "journal.org"))
#+END_SRC
  
* Default Buffers

I want to open these files every time I start Emacs because I'm going to need them anyway.

#+BEGIN_SRC emacs-lisp
  (find-file org-capture-tasks)
  (find-file org-capture-journal)
#+END_SRC
  
* Backups

Move backup files to a dedicated directory where they're easier to find:

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq backup-by-copying t)
  (setq version-control t)
  (setq delete-old-versions t)
#+END_SRC

* GUI

** Splash Screen

If you ever miss the splash screen, C-h C-a is your friend.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

** Toolbar

Check to see if tool-bar-mode is defined, then get rid of it.  It takes up too much space.

#+BEGIN_SRC emacs-lisp
  (if (functionp #'tool-bar-mode)
      (tool-bar-mode -1))
#+END_SRC

** Menu Bar

Keep the menu bar, it's handy sometimes.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 1)
#+END_SRC

** Line Numbers

Just found out about display-line-numbers-mode in Emacs 26.

#+BEGIN_SRC emacs-lisp
  (if (functionp #'global-display-line-numbers-mode)
      (global-display-line-numbers-mode t)
    (global-linum-mode t))
#+END_SRC

** Save Desktop

Make sure we restore our session next time we open Emacs.

#+BEGIN_SRC emacs-lisp
  ;; (desktop-save-mode 1)
#+END_SRC

** Visible Bell

On Windows, the ding gets pretty annoying.
#+BEGIN_SRC emacs-lisp
  (setq visible-bell 1)
#+END_SRC

* Handy Helpers

** Transpose Windows

Create a function to transpose windows (useful for swapping top/bottom or left/right).  This was copied from [[https://www.emacswiki.org/emacs/TransposeWindows][EmacsWiki]].

#+BEGIN_SRC emacs-lisp
  (defun transpose-windows ()
    "Transpose two windows.  If more or less than 2 windows are visible, error."
    (interactive)
    (unless (= 2 (count-windows))
      (error "There must only be 2 windows open."))
    (let* ((windows (window-list))
           (w1 (cl-first windows))
           (w2 (cl-second windows))
           (w1b (window-buffer w1))
           (w2b (window-buffer w2)))
      (set-window-buffer w1 w2b)
      (set-window-buffer w2 w1b)))
#+END_SRC

** Key Bindings

Give our nifty functions some useful key bindings.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x x") 'transpose-windows)
#+END_SRC

* Org-mode
** Visual Line Mode

Lets add a hook to set Visual Line Mode in Org-mode because I like to see everything on one screen without having to move the curosr left and right.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC

** Org Journal

#+BEGIN_SRC emacs-lisp
  (require 'org-journal)
#+END_SRC
   
** Org Capture

Using Capture Templates described on [[https://orgmode.org/manual/Capture-templates.html#Capture-templates][10.1.3 Capture templates]]:

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	'(("t" "TODO" entry (file+headline org-capture-tasks "Tasks")
	   "* TODO %?\n  %i\n  %a")
	  ("j" "Journal" entry (file+datetree org-capture-journal)
	   "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC
   
** Key Bindings

Add some global key bindings for Org commands.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

** Exports

Some export backends are not loaded by default.

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
#+END_SRC

** Agenda

Make sure we log times for when items are marked DONE.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Setup a default target file for notes.

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

* SLiME

** Lisp

Configure our lisp interpretter.  If we're running on Windows, assume SBCL is somewhere in our PATH.

#+BEGIN_SRC emacs-lisp
  (if (string-equal system-type "windows-nt")
    (setq inferior-lisp-program "sbcl")
    (setq inferior-lisp-program "/usr/bin/sbcl"))
#+END_SRC

** SLiME Features

Which SLiME features are we using?

#+BEGIN_SRC emacs-lisp
  (setq slime-contribs '(slime-fancy))
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(custom-enabled-themes (quote (tango-dark))))
#+END_SRC
